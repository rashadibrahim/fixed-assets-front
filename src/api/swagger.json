{
  "swagger": "2.0",
  "basePath": "/",
  "paths": {
    "/asset-transactions/{asset_transaction_id}": {
      "parameters": [
        {
          "name": "asset_transaction_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Asset transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved asset transaction",
            "schema": {
              "$ref": "#/definitions/AssetTransaction"
            }
          }
        },
        "summary": "Get a specific asset transaction",
        "operationId": "get_asset_transaction",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "asset-transactions"
        ]
      },
      "put": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Insufficient quantity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Asset transaction/Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated asset transaction",
            "schema": {
              "$ref": "#/definitions/AssetTransaction"
            }
          }
        },
        "summary": "Update an asset transaction",
        "operationId": "update_asset_transaction",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssetTransactionInput"
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "asset-transactions"
        ]
      },
      "delete": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Asset transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted asset transaction",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete an asset transaction",
        "operationId": "delete_asset_transaction",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "asset-transactions"
        ]
      }
    },
    "/assets/": {
      "get": {
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all fixed assets with pagination and optional category/subcategory filtering",
        "description": "- category_id: Filter by specific category ID\n- subcategory: Filter by subcategory name (case-insensitive partial match)",
        "operationId": "list_assets",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Filter assets by subcategory name",
            "name": "subcategory"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter assets by category ID",
            "name": "category_id"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number",
            "name": "page"
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FixedAsset"
            }
          }
        },
        "summary": "Create a new fixed asset",
        "operationId": "create_asset",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FixedAssetInput"
            }
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/bulk": {
      "post": {
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Bulk operation completed",
            "schema": {
              "$ref": "#/definitions/BulkCreateResult"
            }
          }
        },
        "summary": "Bulk create multiple assets with detailed error reporting",
        "description": "First validates all assets, then adds only the valid ones to the database.\n\nReturns a comprehensive report including:\n- Summary statistics (total, added, rejected, success rate)\n- List of successfully added assets\n- List of rejected assets with detailed error information",
        "operationId": "bulk_create_assets",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FixedAssetInput"
              }
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/bulk-update": {
      "put": {
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Bulk update completed",
            "schema": {
              "$ref": "#/definitions/BulkUpdateResult"
            }
          }
        },
        "summary": "Bulk update multiple assets with detailed error reporting",
        "description": "First validates all asset updates, then applies only the valid ones to the database.\n\nReturns a comprehensive report including:\n- Summary statistics (total, updated, rejected, success rate)\n- List of successfully updated assets\n- List of rejected assets with detailed error information",
        "operationId": "bulk_update_assets",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetUpdateInput"
              }
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/export-excel": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully generated Excel export"
          }
        },
        "summary": "Export all assets to Excel file with optional category/subcategory filtering",
        "description": "Returns Excel file containing:\n- Filter information at the top (if filters are applied)\n- Complete list of assets with all details\n\nOptional filters:\n- category_id: Filter by specific category ID\n- subcategory: Filter by subcategory name (case-insensitive partial match)",
        "operationId": "export_assets_excel",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Filter assets by subcategory name",
            "name": "subcategory"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter assets by category ID",
            "name": "category_id"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/search": {
      "get": {
        "responses": {
          "500": {
            "description": "Search Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Missing Search Query",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AssetSearchResponse"
            }
          }
        },
        "summary": "Search assets by name (text) or product code/barcode (number)",
        "description": "- If query contains letters: searches in name_ar and name_en fields\n- If query is numeric: searches by exact product_code match",
        "operationId": "search_assets",
        "parameters": [
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number",
            "name": "page"
          },
          {
            "required": true,
            "type": "string",
            "in": "query",
            "description": "Search query (text for name search or number for barcode search)",
            "name": "q"
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/{asset_id}": {
      "parameters": [
        {
          "name": "asset_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FixedAsset"
            }
          }
        },
        "summary": "Get a specific asset",
        "operationId": "get_asset",
        "parameters": [
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      },
      "put": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FixedAsset"
            }
          }
        },
        "summary": "Update a specific asset",
        "operationId": "update_asset",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FixedAssetInput"
            }
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a specific asset",
        "operationId": "delete_asset",
        "parameters": [
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/assets/{asset_id}/barcode": {
      "parameters": [
        {
          "name": "asset_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully generated barcode",
            "schema": {
              "$ref": "#/definitions/BarcodeResponse"
            }
          }
        },
        "summary": "Generate a barcode for a specific asset",
        "operationId": "get_asset_barcode",
        "parameters": [
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "assets"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          }
        },
        "summary": "Login user and get access token",
        "operationId": "login",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/me": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved current user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Get current user information",
        "operationId": "get_current_user",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Register a new user (alternative endpoint)",
        "operationId": "register",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Register a new user",
        "operationId": "signup",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/stats": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved statistics",
            "schema": {
              "$ref": "#/definitions/Statistics"
            }
          }
        },
        "summary": "Get system statistics (requires read permissions)",
        "operationId": "get_statistics",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/users": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved users",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all users with pagination + optional search by id or name (Admin only)",
        "operationId": "list_users",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Filter by user name (partial match)",
            "name": "name"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by user ID",
            "name": "id"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Number of items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number for pagination",
            "name": "page"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "summary": "Update a specific user by ID (Admin only)",
        "operationId": "update_user",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "auth"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Cannot delete referenced user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted user",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a specific user by ID (Admin only)",
        "operationId": "delete_user",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "auth"
        ]
      }
    },
    "/branches/": {
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved branches",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all branches with pagination, including warehouses count and optional search",
        "operationId": "list_branches",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Search in branch name",
            "name": "search"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Number of items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number for pagination",
            "name": "page"
          }
        ],
        "tags": [
          "branches"
        ]
      },
      "post": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created branch",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          }
        },
        "summary": "Create a new branch",
        "operationId": "create_branch",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BranchInput"
            }
          }
        ],
        "tags": [
          "branches"
        ]
      }
    },
    "/branches/{branch_id}": {
      "parameters": [
        {
          "name": "branch_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Branch not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved branch",
            "schema": {
              "$ref": "#/definitions/BranchWithCounts"
            }
          }
        },
        "summary": "Get a specific branch by ID",
        "operationId": "get_branch",
        "tags": [
          "branches"
        ]
      },
      "put": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Branch not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated branch",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          }
        },
        "summary": "Update a specific branch by ID",
        "operationId": "update_branch",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BranchInput"
            }
          }
        ],
        "tags": [
          "branches"
        ]
      },
      "delete": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Cannot delete referenced branch",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Branch not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted branch",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a specific branch by ID",
        "operationId": "delete_branch",
        "tags": [
          "branches"
        ]
      }
    },
    "/categories/": {
      "get": {
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all categories with pagination and optional search/filtering",
        "description": "- search: Searches in both category and subcategory fields\n- subcategory: Filters by specific subcategory name",
        "operationId": "list_categories",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Filter by subcategory name",
            "name": "subcategory"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Search in category or subcategory names",
            "name": "search"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number",
            "name": "page"
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "summary": "Create a new category",
        "operationId": "create_category",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      }
    },
    "/categories/bulk": {
      "post": {
        "responses": {
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid input data",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Bulk operation completed",
            "schema": {
              "$ref": "#/definitions/CategoryBulkCreateResult"
            }
          }
        },
        "summary": "Bulk create multiple categories with detailed error reporting",
        "description": "First validates all categories, then adds only the valid ones to the database.\n\nReturns a comprehensive report including:\n- Summary statistics (total, added, rejected, success rate)\n- List of successfully added categories\n- List of rejected categories with detailed error information",
        "operationId": "bulk_create_categories",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInput"
              }
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      }
    },
    "/categories/{category_id}": {
      "parameters": [
        {
          "name": "category_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "summary": "Get a specific category",
        "operationId": "get_category",
        "parameters": [
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      },
      "put": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "summary": "Update a category",
        "operationId": "update_category",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          },
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "responses": {
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Cannot delete category",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a category",
        "operationId": "delete_category",
        "parameters": [
          {
            "name": "X-Fields",
            "in": "header",
            "type": "string",
            "format": "mask",
            "description": "An optional fields mask"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "categories"
        ]
      }
    },
    "/jobroles/": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved job roles",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all job roles with pagination",
        "operationId": "list_job_roles",
        "parameters": [
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Number of items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number for pagination",
            "name": "page"
          }
        ],
        "tags": [
          "jobroles"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created job role",
            "schema": {
              "$ref": "#/definitions/JobRole"
            }
          }
        },
        "summary": "Create a new job role",
        "operationId": "create_job_role",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JobRoleInput"
            }
          }
        ],
        "tags": [
          "jobroles"
        ]
      }
    },
    "/jobroles/{role_id}": {
      "parameters": [
        {
          "name": "role_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Job role not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved job role",
            "schema": {
              "$ref": "#/definitions/JobRole"
            }
          }
        },
        "summary": "Get a specific job role by ID",
        "operationId": "get_job_role",
        "tags": [
          "jobroles"
        ]
      },
      "put": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Job role not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated job role",
            "schema": {
              "$ref": "#/definitions/JobRole"
            }
          }
        },
        "summary": "Update a specific job role by ID (Admin only)",
        "operationId": "update_job_role",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JobRoleInput"
            }
          }
        ],
        "tags": [
          "jobroles"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Cannot delete referenced job role",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Job role not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted job role",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a specific job role by ID (Admin only)",
        "operationId": "delete_job_role",
        "tags": [
          "jobroles"
        ]
      }
    },
    "/transactions/": {
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved transactions",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all transactions with pagination and filtering",
        "operationId": "list_transactions",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Search in description or reference number",
            "name": "search"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter transactions to date (YYYY-MM-DD)",
            "name": "date_to"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter transactions from date (YYYY-MM-DD)",
            "name": "date_from"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by warehouse ID",
            "name": "warehouse_id"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by branch ID",
            "name": "branch_id"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number",
            "name": "page"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      },
      "post": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Insufficient quantity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Warehouse/Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created transaction",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        },
        "summary": "Create a new transaction with asset transactions",
        "operationId": "create_transaction",
        "parameters": [
          {
            "name": "attached_file",
            "in": "formData",
            "type": "file",
            "description": "File attachment"
          },
          {
            "name": "data",
            "in": "formData",
            "type": "string",
            "description": "Transaction data as JSON string. Example:\n{\n  \"date\": \"2025-09-24\",\n  \"description\": \"string\", \n  \"reference_number\": \"string\",\n  \"warehouse_id\": 0,\n  \"transaction_type\": true,\n  \"asset_transactions\": [\n    {\n      \"asset_id\": 0,\n      \"quantity\": 1,\n      \"amount\": 0\n    }\n  ]\n}"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/asset-average/{asset_id}": {
      "parameters": [
        {
          "name": "asset_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved asset average"
          }
        },
        "summary": "Get average cost for asset from IN transactions",
        "operationId": "get_asset_average",
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/generate-excel-report": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully generated Excel report"
          }
        },
        "summary": "Generate comprehensive transaction report as Excel file",
        "description": "Returns Excel file with:\n- Filter information at the top\n- Asset-wise summary including:\n  * Asset name and details\n  * Total quantity IN and OUT\n  * Total amount IN and OUT  \n  * Total cost (quantity × amount) IN and OUT\n  * Overall totals\n\nREQUIRED: date parameter must be provided\nOptional filters can be combined:\n- Category: ?category=Electronics\n- Subcategory: ?subcategory=Laptops (can be used with or without category)\n- Branch/Warehouse: ?branch_id=1 or ?warehouse_id=1",
        "operationId": "generate_excel_report",
        "parameters": [
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by warehouse ID",
            "name": "warehouse_id"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by branch ID",
            "name": "branch_id"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter by subcategory name",
            "name": "subcategory"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter by category name",
            "name": "category"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "Filter by exact date (YYYY-MM-DD) - REQUIRED",
            "name": "date"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/generate-report": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Generate comprehensive transaction report with asset-level analysis",
        "description": "Returns asset-wise summary including:\n- Asset name and details\n- Total quantity IN and OUT\n- Total amount IN and OUT  \n- Total cost (quantity × amount) IN and OUT\n- Overall totals\n\nREQUIRED: date parameter must be provided\nOptional filters can be combined:\n- Category: ?category=Electronics\n- Subcategory: ?subcategory=Laptops (can be used with or without category)\n- Branch/Warehouse: ?branch_id=1 or ?warehouse_id=1",
        "operationId": "generate_report",
        "parameters": [
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by warehouse ID",
            "name": "warehouse_id"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by branch ID",
            "name": "branch_id"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter by subcategory name",
            "name": "subcategory"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Filter by category name",
            "name": "category"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "Filter by exact date (YYYY-MM-DD) - REQUIRED",
            "name": "date"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/summary": {
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved transaction summary"
          }
        },
        "summary": "Get transaction summary statistics",
        "operationId": "get_transaction_summary",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Summary to date (YYYY-MM-DD)",
            "name": "date_to"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Summary from date (YYYY-MM-DD)",
            "name": "date_from"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by warehouse ID",
            "name": "warehouse_id"
          },
          {
            "type": "integer",
            "in": "query",
            "description": "Filter by branch ID",
            "name": "branch_id"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transaction_id}": {
      "parameters": [
        {
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved transaction",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        },
        "summary": "Get a specific transaction",
        "operationId": "get_transaction",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      },
      "put": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated transaction",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        },
        "summary": "Update a transaction",
        "operationId": "update_transaction",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TransactionInput"
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      },
      "delete": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted transaction",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a transaction",
        "operationId": "delete_transaction",
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transaction_id}/assets": {
      "parameters": [
        {
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved transaction assets",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all asset transactions for a specific transaction",
        "operationId": "get_transaction_assets",
        "parameters": [
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number",
            "name": "page"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      },
      "post": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Insufficient quantity",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction/Asset not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully added asset to transaction",
            "schema": {
              "$ref": "#/definitions/AssetTransaction"
            }
          }
        },
        "summary": "Add an asset transaction to an existing transaction",
        "operationId": "add_asset_to_transaction",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssetTransactionInput"
            }
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transaction_id}/download": {
      "parameters": [
        {
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Transaction/File not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully downloaded file"
          }
        },
        "summary": "Download the attached file for a transaction",
        "operationId": "download_transaction_file",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "JWT token for authentication (alternative to Authorization header)",
            "name": "token"
          }
        ],
        "security": [
          {
            "Bearer Auth": []
          }
        ],
        "tags": [
          "transactions"
        ]
      }
    },
    "/warehouses/": {
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved warehouses",
            "schema": {
              "$ref": "#/definitions/PaginationResponse"
            }
          }
        },
        "summary": "Get all warehouses with pagination and optional search",
        "operationId": "list_warehouses",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "description": "Search in warehouse English name",
            "name": "search"
          },
          {
            "type": "integer",
            "default": 10,
            "in": "query",
            "description": "Number of items per page",
            "name": "per_page"
          },
          {
            "type": "integer",
            "default": 1,
            "in": "query",
            "description": "Page number for pagination",
            "name": "page"
          }
        ],
        "tags": [
          "warehouses"
        ]
      },
      "post": {
        "responses": {
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "201": {
            "description": "Successfully created warehouse",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        },
        "summary": "Create a new warehouse",
        "operationId": "create_warehouse",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WarehouseInput"
            }
          }
        ],
        "tags": [
          "warehouses"
        ]
      }
    },
    "/warehouses/{warehouse_id}": {
      "parameters": [
        {
          "name": "warehouse_id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "get": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Warehouse not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully retrieved warehouse",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        },
        "summary": "Get a specific warehouse by ID",
        "operationId": "get_warehouse",
        "tags": [
          "warehouses"
        ]
      },
      "put": {
        "responses": {
          "409": {
            "description": "Conflict - Duplicate entry",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Warehouse not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully updated warehouse",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        },
        "summary": "Update a specific warehouse by ID",
        "operationId": "update_warehouse",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WarehouseInput"
            }
          }
        ],
        "tags": [
          "warehouses"
        ]
      },
      "delete": {
        "responses": {
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Cannot delete referenced warehouse",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Warehouse not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "200": {
            "description": "Successfully deleted warehouse",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          }
        },
        "summary": "Delete a specific warehouse by ID",
        "operationId": "delete_warehouse",
        "tags": [
          "warehouses"
        ]
      }
    }
  },
  "info": {
    "title": "Fixed Assets Management API",
    "version": "1.0",
    "description": "A comprehensive API for managing fixed assets, warehouses, branches, users, and job roles with role-based permissions",
    "contact": {
      "name": "API Support",
      "email": "support@example.com",
      "url": null
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer Auth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
    }
  },
  "security": [
    {
      "Bearer Auth": []
    }
  ],
  "tags": [
    {
      "name": "branches",
      "description": "Branch management operations"
    },
    {
      "name": "warehouses",
      "description": "Warehouse management operations"
    },
    {
      "name": "categories",
      "description": "Category management operations"
    },
    {
      "name": "assets",
      "description": "Fixed asset management operations"
    },
    {
      "name": "auth",
      "description": "Authentication and user management operations"
    },
    {
      "name": "jobroles",
      "description": "Job role and permissions management operations"
    },
    {
      "name": "transactions",
      "description": "Transaction operations"
    },
    {
      "name": "asset-transactions",
      "description": "Asset transaction operations"
    }
  ],
  "definitions": {
    "BranchInput": {
      "required": [
        "name_ar"
      ],
      "properties": {
        "name_ar": {
          "type": "string",
          "description": "Branch name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Branch name in English"
        },
        "address_ar": {
          "type": "string",
          "description": "Branch address in Arabic"
        },
        "address_en": {
          "type": "string",
          "description": "Branch address in English"
        }
      },
      "type": "object"
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "type": "string",
          "description": "Error message"
        },
        "errors": {
          "type": "object",
          "description": "Validation errors (object with field names as keys)"
        }
      },
      "type": "object"
    },
    "PaginationResponse": {
      "properties": {
        "items": {
          "type": "object",
          "description": "List of items"
        },
        "total": {
          "type": "integer",
          "description": "Total number of items"
        },
        "page": {
          "type": "integer",
          "description": "Current page number"
        },
        "pages": {
          "type": "integer",
          "description": "Total number of pages"
        }
      },
      "type": "object"
    },
    "Branch": {
      "required": [
        "name_ar"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Branch unique identifier",
          "readOnly": true
        },
        "name_ar": {
          "type": "string",
          "description": "Branch name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Branch name in English"
        },
        "address_ar": {
          "type": "string",
          "description": "Branch address in Arabic"
        },
        "address_en": {
          "type": "string",
          "description": "Branch address in English"
        }
      },
      "type": "object"
    },
    "BranchWithCounts": {
      "required": [
        "name_ar"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Branch unique identifier",
          "readOnly": true
        },
        "name_ar": {
          "type": "string",
          "description": "Branch name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Branch name in English"
        },
        "address_ar": {
          "type": "string",
          "description": "Branch address in Arabic"
        },
        "address_en": {
          "type": "string",
          "description": "Branch address in English"
        },
        "warehouse_count": {
          "type": "integer",
          "description": "Number of warehouses in branch"
        },
        "warehouses": {
          "type": "array",
          "description": "List of warehouses in branch",
          "items": {
            "$ref": "#/definitions/Warehouse"
          }
        }
      },
      "type": "object"
    },
    "Warehouse": {
      "required": [
        "name_ar"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Warehouse unique identifier",
          "readOnly": true
        },
        "branch_id": {
          "type": "integer",
          "description": "Branch ID this warehouse belongs to"
        },
        "name_ar": {
          "type": "string",
          "description": "Warehouse name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Warehouse name in English"
        },
        "address_ar": {
          "type": "string",
          "description": "Warehouse address in Arabic"
        },
        "address_en": {
          "type": "string",
          "description": "Warehouse address in English"
        }
      },
      "type": "object"
    },
    "SuccessResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Success message"
        }
      },
      "type": "object"
    },
    "WarehouseInput": {
      "required": [
        "name_ar"
      ],
      "properties": {
        "branch_id": {
          "type": "integer",
          "description": "Branch ID this warehouse belongs to"
        },
        "name_ar": {
          "type": "string",
          "description": "Warehouse name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Warehouse name in English"
        },
        "address_ar": {
          "type": "string",
          "description": "Warehouse address in Arabic"
        },
        "address_en": {
          "type": "string",
          "description": "Warehouse address in English"
        }
      },
      "type": "object"
    },
    "CategoryInput": {
      "required": [
        "category",
        "subcategory"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Asset category"
        },
        "subcategory": {
          "type": "string",
          "description": "Asset subcategory"
        }
      },
      "type": "object"
    },
    "Category": {
      "required": [
        "category",
        "subcategory"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Category unique identifier",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "description": "Asset category"
        },
        "subcategory": {
          "type": "string",
          "description": "Asset subcategory"
        }
      },
      "type": "object"
    },
    "CategoryBulkCreateResult": {
      "properties": {
        "summary": {
          "$ref": "#/definitions/CategoryBulkSummary"
        },
        "added_categories": {
          "type": "array",
          "description": "Successfully added categories",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "rejected_categories": {
          "type": "array",
          "description": "Rejected categories with error details",
          "items": {
            "$ref": "#/definitions/RejectedCategory"
          }
        }
      },
      "type": "object"
    },
    "CategoryBulkSummary": {
      "properties": {
        "total_processed": {
          "type": "integer",
          "description": "Total number of categories processed"
        },
        "successfully_added": {
          "type": "integer",
          "description": "Number of categories successfully added"
        },
        "rejected": {
          "type": "integer",
          "description": "Number of categories rejected"
        },
        "success_rate": {
          "type": "string",
          "description": "Success rate percentage"
        }
      },
      "type": "object"
    },
    "RejectedCategory": {
      "properties": {
        "category_data": {
          "type": "object",
          "description": "Original category data that was rejected"
        },
        "category_name": {
          "type": "string",
          "description": "Category name (if available)"
        },
        "errors": {
          "type": "array",
          "description": "List of error messages",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "FixedAssetInput": {
      "required": [
        "category_id",
        "name_ar",
        "name_en"
      ],
      "properties": {
        "name_ar": {
          "type": "string",
          "description": "Asset name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Asset name in English"
        },
        "quantity": {
          "type": "integer",
          "description": "Asset quantity",
          "default": 1
        },
        "product_code": {
          "type": "string",
          "description": "Product code or serial number"
        },
        "category_id": {
          "type": "integer",
          "description": "Category ID this asset belongs to"
        },
        "is_active": {
          "type": "boolean",
          "description": "Whether the asset is active",
          "default": true
        }
      },
      "type": "object"
    },
    "FixedAsset": {
      "required": [
        "category_id",
        "is_active",
        "name_ar",
        "name_en",
        "quantity"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Asset unique identifier",
          "readOnly": true
        },
        "name_ar": {
          "type": "string",
          "description": "Asset name in Arabic"
        },
        "name_en": {
          "type": "string",
          "description": "Asset name in English"
        },
        "quantity": {
          "type": "integer",
          "description": "Asset quantity",
          "default": 1
        },
        "product_code": {
          "type": "string",
          "description": "Product code or serial number (used for barcode)"
        },
        "category_id": {
          "type": "integer",
          "description": "Category ID this asset belongs to"
        },
        "is_active": {
          "type": "boolean",
          "description": "Whether the asset is active"
        }
      },
      "type": "object"
    },
    "BarcodeResponse": {
      "properties": {
        "product_code": {
          "type": "string",
          "description": "Product code used for the barcode"
        },
        "barcode_image": {
          "type": "string",
          "description": "Base64 encoded barcode image"
        }
      },
      "type": "object"
    },
    "AssetSearchResponse": {
      "properties": {
        "items": {
          "type": "array",
          "description": "List of found assets",
          "items": {
            "$ref": "#/definitions/FixedAsset"
          }
        },
        "total": {
          "type": "integer",
          "description": "Total number of matching assets"
        },
        "page": {
          "type": "integer",
          "description": "Current page number"
        },
        "pages": {
          "type": "integer",
          "description": "Total number of pages"
        }
      },
      "type": "object"
    },
    "BulkCreateResult": {
      "properties": {
        "summary": {
          "$ref": "#/definitions/BulkSummary"
        },
        "added_assets": {
          "type": "array",
          "description": "Successfully added assets",
          "items": {
            "$ref": "#/definitions/FixedAsset"
          }
        },
        "rejected_assets": {
          "type": "array",
          "description": "Rejected assets with error details",
          "items": {
            "$ref": "#/definitions/RejectedAsset"
          }
        }
      },
      "type": "object"
    },
    "BulkSummary": {
      "properties": {
        "total_processed": {
          "type": "integer",
          "description": "Total number of assets processed"
        },
        "successfully_added": {
          "type": "integer",
          "description": "Number of assets successfully added"
        },
        "rejected": {
          "type": "integer",
          "description": "Number of assets rejected"
        },
        "success_rate": {
          "type": "string",
          "description": "Success rate percentage"
        }
      },
      "type": "object"
    },
    "RejectedAsset": {
      "properties": {
        "asset_data": {
          "type": "object",
          "description": "Original asset data that was rejected"
        },
        "asset_name": {
          "type": "string",
          "description": "Asset name (if available)"
        },
        "errors": {
          "type": "array",
          "description": "List of error messages",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "AssetUpdateInput": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Asset ID to update"
        },
        "name_ar": {
          "type": "string",
          "description": "Arabic name"
        },
        "name_en": {
          "type": "string",
          "description": "English name"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity"
        },
        "product_code": {
          "type": "string",
          "description": "Product code"
        },
        "category_id": {
          "type": "integer",
          "description": "Category ID"
        },
        "is_active": {
          "type": "boolean",
          "description": "Active status"
        }
      },
      "type": "object"
    },
    "BulkUpdateResult": {
      "properties": {
        "summary": {
          "$ref": "#/definitions/BulkSummary"
        },
        "updated_assets": {
          "type": "array",
          "description": "Successfully updated assets",
          "items": {
            "$ref": "#/definitions/FixedAsset"
          }
        },
        "rejected_assets": {
          "type": "array",
          "description": "Rejected assets with error details",
          "items": {
            "$ref": "#/definitions/RejectedAsset"
          }
        }
      },
      "type": "object"
    },
    "UserInput": {
      "required": [
        "email",
        "full_name",
        "password",
        "role"
      ],
      "properties": {
        "full_name": {
          "type": "string",
          "description": "User full name"
        },
        "email": {
          "type": "string",
          "description": "User email address"
        },
        "password": {
          "type": "string",
          "description": "User password"
        },
        "role": {
          "type": "string",
          "description": "User role"
        },
        "permissions": {
          "description": "Custom user permissions (optional, defaults to role permissions)",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissionsInput"
            }
          ]
        }
      },
      "type": "object"
    },
    "UserPermissionsInput": {
      "properties": {
        "can_read_branch": {
          "type": "boolean",
          "description": "Permission to read branches"
        },
        "can_edit_branch": {
          "type": "boolean",
          "description": "Permission to edit branches"
        },
        "can_delete_branch": {
          "type": "boolean",
          "description": "Permission to delete branches"
        },
        "can_read_warehouse": {
          "type": "boolean",
          "description": "Permission to read warehouses"
        },
        "can_edit_warehouse": {
          "type": "boolean",
          "description": "Permission to edit warehouses"
        },
        "can_delete_warehouse": {
          "type": "boolean",
          "description": "Permission to delete warehouses"
        },
        "can_read_asset": {
          "type": "boolean",
          "description": "Permission to read assets"
        },
        "can_edit_asset": {
          "type": "boolean",
          "description": "Permission to edit assets"
        },
        "can_delete_asset": {
          "type": "boolean",
          "description": "Permission to delete assets"
        },
        "can_print_barcode": {
          "type": "boolean",
          "description": "Permission to print barcodes"
        },
        "can_make_report": {
          "type": "boolean",
          "description": "Permission to make reports"
        },
        "can_make_transaction": {
          "type": "boolean",
          "description": "Permission to make transactions"
        }
      },
      "type": "object"
    },
    "User": {
      "required": [
        "email",
        "full_name",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "User unique identifier",
          "readOnly": true
        },
        "full_name": {
          "type": "string",
          "description": "User full name"
        },
        "email": {
          "type": "string",
          "description": "User email address"
        },
        "role": {
          "type": "string",
          "description": "User role"
        },
        "can_read_branch": {
          "type": "boolean",
          "description": "Permission to read branches"
        },
        "can_edit_branch": {
          "type": "boolean",
          "description": "Permission to edit branches"
        },
        "can_delete_branch": {
          "type": "boolean",
          "description": "Permission to delete branches"
        },
        "can_read_warehouse": {
          "type": "boolean",
          "description": "Permission to read warehouses"
        },
        "can_edit_warehouse": {
          "type": "boolean",
          "description": "Permission to edit warehouses"
        },
        "can_delete_warehouse": {
          "type": "boolean",
          "description": "Permission to delete warehouses"
        },
        "can_read_asset": {
          "type": "boolean",
          "description": "Permission to read assets"
        },
        "can_edit_asset": {
          "type": "boolean",
          "description": "Permission to edit assets"
        },
        "can_delete_asset": {
          "type": "boolean",
          "description": "Permission to delete assets"
        },
        "can_print_barcode": {
          "type": "boolean",
          "description": "Permission to print barcodes"
        },
        "can_make_report": {
          "type": "boolean",
          "description": "Permission to make reports"
        },
        "can_make_transaction": {
          "type": "boolean",
          "description": "Permission to make transactions"
        }
      },
      "type": "object"
    },
    "Login": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "User email address"
        },
        "password": {
          "type": "string",
          "description": "User password"
        }
      },
      "type": "object"
    },
    "AuthResponse": {
      "properties": {
        "access_token": {
          "type": "string",
          "description": "JWT access token"
        },
        "user": {
          "description": "User information",
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        }
      },
      "type": "object"
    },
    "UserUpdate": {
      "properties": {
        "full_name": {
          "type": "string",
          "description": "Username"
        },
        "email": {
          "type": "string",
          "description": "User email address"
        },
        "role": {
          "type": "string",
          "description": "User role"
        },
        "permissions": {
          "description": "User permissions",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ]
        }
      },
      "type": "object"
    },
    "UserPermissions": {
      "properties": {
        "can_read_branch": {
          "type": "boolean",
          "description": "Permission to read branches"
        },
        "can_edit_branch": {
          "type": "boolean",
          "description": "Permission to edit branches"
        },
        "can_delete_branch": {
          "type": "boolean",
          "description": "Permission to delete branches"
        },
        "can_read_warehouse": {
          "type": "boolean",
          "description": "Permission to read warehouses"
        },
        "can_edit_warehouse": {
          "type": "boolean",
          "description": "Permission to edit warehouses"
        },
        "can_delete_warehouse": {
          "type": "boolean",
          "description": "Permission to delete warehouses"
        },
        "can_read_asset": {
          "type": "boolean",
          "description": "Permission to read assets"
        },
        "can_edit_asset": {
          "type": "boolean",
          "description": "Permission to edit assets"
        },
        "can_delete_asset": {
          "type": "boolean",
          "description": "Permission to delete assets"
        },
        "can_print_barcode": {
          "type": "boolean",
          "description": "Permission to print barcodes"
        },
        "can_make_report": {
          "type": "boolean",
          "description": "Permission to make reports"
        },
        "can_make_transaction": {
          "type": "boolean",
          "description": "Permission to make transactions"
        }
      },
      "type": "object"
    },
    "Statistics": {
      "properties": {
        "total_branches": {
          "type": "integer",
          "description": "Total number of branches"
        },
        "total_warehouses": {
          "type": "integer",
          "description": "Total number of warehouses"
        },
        "total_assets": {
          "type": "integer",
          "description": "Total number of assets"
        },
        "active_assets": {
          "type": "integer",
          "description": "Number of active assets"
        },
        "inactive_assets": {
          "type": "integer",
          "description": "Number of inactive assets"
        },
        "total_users": {
          "type": "integer",
          "description": "Total number of users"
        },
        "job_roles_count": {
          "type": "integer",
          "description": "Number of job roles"
        }
      },
      "type": "object"
    },
    "JobRoleInput": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Job role name"
        },
        "can_read_branch": {
          "type": "boolean",
          "description": "Permission to read branches",
          "default": false
        },
        "can_edit_branch": {
          "type": "boolean",
          "description": "Permission to edit branches",
          "default": false
        },
        "can_delete_branch": {
          "type": "boolean",
          "description": "Permission to delete branches",
          "default": false
        },
        "can_read_warehouse": {
          "type": "boolean",
          "description": "Permission to read warehouses",
          "default": false
        },
        "can_edit_warehouse": {
          "type": "boolean",
          "description": "Permission to edit warehouses",
          "default": false
        },
        "can_delete_warehouse": {
          "type": "boolean",
          "description": "Permission to delete warehouses",
          "default": false
        },
        "can_read_asset": {
          "type": "boolean",
          "description": "Permission to read assets",
          "default": false
        },
        "can_edit_asset": {
          "type": "boolean",
          "description": "Permission to edit assets",
          "default": false
        },
        "can_delete_asset": {
          "type": "boolean",
          "description": "Permission to delete assets",
          "default": false
        },
        "can_print_barcode": {
          "type": "boolean",
          "description": "Permission to print barcodes",
          "default": false
        },
        "can_make_report": {
          "type": "boolean",
          "description": "Permission to make reports",
          "default": false
        },
        "can_make_transaction": {
          "type": "boolean",
          "description": "Permission to make transactions",
          "default": false
        }
      },
      "type": "object"
    },
    "JobRole": {
      "required": [
        "can_delete_asset",
        "can_delete_branch",
        "can_delete_warehouse",
        "can_edit_asset",
        "can_edit_branch",
        "can_edit_warehouse",
        "can_make_report",
        "can_make_transaction",
        "can_print_barcode",
        "can_read_asset",
        "can_read_branch",
        "can_read_warehouse",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Job role unique identifier",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Job role name"
        },
        "can_read_branch": {
          "type": "boolean",
          "description": "Permission to read branches"
        },
        "can_edit_branch": {
          "type": "boolean",
          "description": "Permission to edit branches"
        },
        "can_delete_branch": {
          "type": "boolean",
          "description": "Permission to delete branches"
        },
        "can_read_warehouse": {
          "type": "boolean",
          "description": "Permission to read warehouses"
        },
        "can_edit_warehouse": {
          "type": "boolean",
          "description": "Permission to edit warehouses"
        },
        "can_delete_warehouse": {
          "type": "boolean",
          "description": "Permission to delete warehouses"
        },
        "can_read_asset": {
          "type": "boolean",
          "description": "Permission to read assets"
        },
        "can_edit_asset": {
          "type": "boolean",
          "description": "Permission to edit assets"
        },
        "can_delete_asset": {
          "type": "boolean",
          "description": "Permission to delete assets"
        },
        "can_print_barcode": {
          "type": "boolean",
          "description": "Permission to print barcodes"
        },
        "can_make_report": {
          "type": "boolean",
          "description": "Permission to make reports"
        },
        "can_make_transaction": {
          "type": "boolean",
          "description": "Permission to make transactions"
        }
      },
      "type": "object"
    },
    "Transaction": {
      "required": [
        "custom_id",
        "date",
        "id",
        "transaction_type",
        "warehouse_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Transaction ID"
        },
        "custom_id": {
          "type": "string",
          "description": "Custom transaction ID (Branch-specific)"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Transaction date"
        },
        "description": {
          "type": "string",
          "description": "Transaction description"
        },
        "reference_number": {
          "type": "string",
          "description": "Reference number"
        },
        "warehouse_id": {
          "type": "integer",
          "description": "Warehouse ID"
        },
        "user_id": {
          "type": "integer",
          "description": "User ID who created the transaction"
        },
        "attached_file": {
          "type": "string",
          "description": "Attached file path/URL"
        },
        "transaction_type": {
          "type": "boolean",
          "description": "Transaction type (true=IN, false=OUT)"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp"
        },
        "warehouse": {
          "description": "Warehouse details",
          "allOf": [
            {
              "$ref": "#/definitions/Warehouse"
            }
          ]
        },
        "user": {
          "description": "User who created the transaction",
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "asset_transactions": {
          "type": "array",
          "description": "Asset transactions",
          "items": {
            "$ref": "#/definitions/AssetTransaction"
          }
        }
      },
      "type": "object"
    },
    "AssetTransaction": {
      "required": [
        "asset_id",
        "id",
        "quantity",
        "transaction_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Asset Transaction ID"
        },
        "transaction_id": {
          "type": "integer",
          "description": "Transaction ID"
        },
        "asset_id": {
          "type": "integer",
          "description": "Asset ID"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity"
        },
        "amount": {
          "type": "number",
          "description": "Unit amount/price"
        },
        "total_value": {
          "type": "number",
          "description": "Total value (quantity * amount)"
        },
        "asset": {
          "description": "Asset details",
          "allOf": [
            {
              "$ref": "#/definitions/FixedAsset"
            }
          ]
        }
      },
      "type": "object"
    },
    "TransactionInput": {
      "required": [
        "date",
        "transaction_type",
        "warehouse_id"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "description": "Transaction date"
        },
        "description": {
          "type": "string",
          "description": "Transaction description"
        },
        "reference_number": {
          "type": "string",
          "description": "Reference number"
        },
        "warehouse_id": {
          "type": "integer",
          "description": "Warehouse ID"
        },
        "attached_file": {
          "type": "string",
          "description": "Attached file path/URL"
        },
        "transaction_type": {
          "type": "boolean",
          "description": "Transaction type (true=IN, false=OUT)"
        }
      },
      "type": "object"
    },
    "AssetTransactionInput": {
      "required": [
        "asset_id",
        "quantity"
      ],
      "properties": {
        "asset_id": {
          "type": "integer",
          "description": "Asset ID"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity",
          "minimum": 1
        },
        "amount": {
          "type": "number",
          "description": "Unit amount/price"
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  }
}
